{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","Components/errorboundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","width","height","name","email","CardList","robots","CardComponent","map","user","i","key","Searchbox","searchfield","searchchange","type","placeholder","onChange","Scroll","style","overflow","border","children","Errorboundary","state","hasError","error","info","this","setState","Component","App","onsearchchange","event","target","value","fetch","then","response","json","users","filteredrobot","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAACC,GACV,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,MAAMC,IAAG,+BAA0BH,EAAMI,IAAMC,MAAM,MAAMC,OAAO,QAC3E,6BACI,4BAAKN,EAAMO,MACX,2BAAIP,EAAMQ,UCOXC,EAbE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIM,EAAOI,GAAGV,GAAIG,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAG/E,OACA,6BACKG,ICAMK,EARG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKjB,UAAU,OACX,2BAAOA,UAAU,mCAAmCkB,KAAK,SAASC,YAAY,gBAC7EC,SAAUH,MCIRI,EARD,SAACtB,GACX,OACI,yBAAKuB,MAAO,CAAEC,SAAS,SAASC,OAAO,kBAAmBnB,OAAO,UAC5DN,EAAM0B,WCeJC,G,wDAjBX,WAAY3B,GAAO,IAAD,8BACd,cAAMA,IACD4B,MAAM,CACPC,UAAS,GAHC,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACH,+DAEJG,KAAKhC,MAAM0B,a,GAdEQ,cCyCbC,E,kDAlCX,aAAc,IAAD,8BACT,gBAaJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAAEhB,YAAYoB,EAAMC,OAAOC,SAbzC,EAAKX,MAAM,CACPlB,OAAO,GACPO,YAAY,IAJP,E,gEAQO,IAAD,OACfuB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACvB,OAAQkC,S,+BAMjC,IAAD,EACuBZ,KAAKJ,MAAzBlB,EADH,EACGA,OAAOO,EADV,EACUA,YACR4B,EAAcnC,EAAOoC,QAAO,SAAAC,GAC9B,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAShC,EAAY+B,kBAEzD,OACA,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWiB,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAAQmC,W,GA7BhBX,aCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.7d215ff4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='pic' src={`https://robohash.org/${props.id}`} width='200' height='200' />\r\n            <div>\r\n                <h3>{props.name}</h3>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) =>{\r\n    const CardComponent = robots.map((user,i) =>{\r\n        return(\r\n            <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n        )\r\n    })\r\n    return(\r\n    <div>\r\n        {CardComponent}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield,searchchange}) =>{\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots'\r\n             onChange={searchchange}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return(\r\n        <div style={{ overflow:'scroll',border:'2px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass Errorboundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>ooooppsss. This is not gooooddd</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default Errorboundary;","import React,{Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\n// import {robots} from './robots';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nimport Errorboundary from '../Components/errorboundary';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield:'',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots :users}))\r\n    }\r\n\r\n    onsearchchange=(event) =>{\r\n        this.setState({ searchfield:event.target.value})\r\n    }\r\n    render(){\r\n        const {robots,searchfield}=this.state;\r\n        const filteredrobot=robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return(  \r\n        <div className='tc'>\r\n            <h1 className='f2'>RoboFriends</h1>\r\n            <Searchbox searchchange={this.onsearchchange}/>\r\n            <Scroll>\r\n                <Errorboundary>\r\n                <CardList robots={filteredrobot}/>\r\n                </Errorboundary>\r\n            </Scroll>\r\n        </div>);\r\n        }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}